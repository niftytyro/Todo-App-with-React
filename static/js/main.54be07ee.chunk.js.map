{"version":3,"sources":["Components/HeaderComponent.js","Components/Todos.js","Components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["header","className","todos","props","todosList","map","value","index","onDoubleClick","event","onTap","preventDefault","key","onChange","target","add_todo","onClick","App","state","tasks","deleteTask","splice","setState","addTask","push","onTaskChange","newTask","this","HeaderComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAOeA,G,YAJA,WACb,OAAO,yBAAKC,UAAU,cAAf,cCwBMC,G,MAzBD,SAACC,GACb,IAAIC,EAAYD,EAAMC,UAAUC,KAAI,SAACC,EAAOC,GAC1C,OACE,wBACEC,cAAe,SAACC,GACdN,EAAMO,MAAMH,GACZE,EAAME,kBAERV,UAAU,YACVW,IAAKL,GAEL,2BACED,MAAOA,EACPO,SAAU,SAACJ,GAAD,OAAWN,EAAMU,SAASN,EAAOE,EAAMK,OAAOR,QACxDE,cAAe,SAACC,GACdN,EAAMO,MAAMH,GACZE,EAAME,wBAMhB,OAAO,wBAAIV,UAAU,cAAcG,KCdtBW,G,MARE,SAACZ,GAChB,OACE,4BAAQa,QAASb,EAAMO,MAAOT,UAAU,iBAAxC,OC+CWgB,E,4MA7CbC,MAAQ,CACNC,MAAO,CACL,0CACA,wC,EAIJC,WAAa,SAACb,GACZ,IAAMY,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAME,OAAOd,EAAO,GACpB,EAAKe,SAAS,CACZH,MAAOA,K,EAGXI,QAAU,WACR,IAAMJ,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAMK,KAAK,IACX,EAAKF,SAAS,CACZH,MAAOA,K,EAGXM,aAAe,SAAClB,EAAOmB,GACrB,IAAMP,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAMZ,GAASmB,EACf,EAAKJ,SAAS,CAAEH,MAAOA,K,uDAIvB,IAAIf,EAAS,YAAOuB,KAAKT,MAAMC,OAC/B,OACE,yBAAKlB,UAAU,OACb,kBAAC2B,EAAD,MACA,yBAAK3B,UAAU,kBACb,kBAAC,EAAD,CACES,MAAOiB,KAAKP,WACZP,SAAUc,KAAKF,aACfrB,UAAWA,IAEb,kBAAC,EAAD,CAAkBM,MAAOiB,KAAKJ,gB,GAvCtBM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54be07ee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst header = () => {\n  return <div className=\"App-header\">My Tasks</div>;\n};\n\nexport default header;\n","import React from \"react\";\nimport \"./Todos.css\";\n\nconst todos = (props) => {\n  var todosList = props.todosList.map((value, index) => {\n    return (\n      <li\n        onDoubleClick={(event) => {\n          props.onTap(index);\n          event.preventDefault();\n        }}\n        className=\"todo-item\"\n        key={index}\n      >\n        <input\n          value={value}\n          onChange={(event) => props.onChange(index, event.target.value)}\n          onDoubleClick={(event) => {\n            props.onTap(index);\n            event.preventDefault();\n          }}\n        />\n      </li>\n    );\n  });\n  return <ul className=\"todos-list\">{todosList}</ul>;\n};\n\nexport default todos;\n","import React from \"react\";\nimport \"./AddTodo.css\";\n\nconst add_todo = (props) => {\n  return (\n    <button onClick={props.onTap} className=\"add-todo-item\">\n      +\n    </button>\n  );\n};\n\nexport default add_todo;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport HeaderComponent from \"./Components/HeaderComponent\";\nimport TodosComponent from \"./Components/Todos\";\nimport AddTodoComponent from \"./Components/AddTodo\";\n\nclass App extends Component {\n  state = {\n    tasks: [\n      \"Press the '+' button to add more tasks.\",\n      \"Douple tap a task to delete a task.\",\n    ],\n  };\n\n  deleteTask = (index) => {\n    const tasks = [...this.state.tasks];\n    tasks.splice(index, 1);\n    this.setState({\n      tasks: tasks,\n    });\n  };\n  addTask = () => {\n    const tasks = [...this.state.tasks];\n    tasks.push(\"\");\n    this.setState({\n      tasks: tasks,\n    });\n  };\n  onTaskChange = (index, newTask) => {\n    const tasks = [...this.state.tasks];\n    tasks[index] = newTask;\n    this.setState({ tasks: tasks });\n  };\n\n  render() {\n    let todosList = [...this.state.tasks];\n    return (\n      <div className=\"App\">\n        <HeaderComponent />\n        <div className=\"todo-container\">\n          <TodosComponent\n            onTap={this.deleteTask}\n            onChange={this.onTaskChange}\n            todosList={todosList}\n          />\n          <AddTodoComponent onTap={this.addTask} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}